create database db_sistema;
use db_sistema; 

CREATE table tb_categoria ( cd_categoria smallint not null primary key identity(1,1), nm_categoria varchar(40) not null );
CREATE table tb_produto ( cd_produto int not null primary key identity(1,1), nm_produto varchar(40) not null, vl_produto_atual float(7), qt_produto_min int not null, qt_produto_atual int not null, tp_status_produto bit not null, fk_categoria smallint not null, constraint fk_categoria FOREIGN KEY (fk_categoria) references tb_categoria(cd_categoria))
CREATE table tb_transacao ( cd_transacao int not null primary key identity(1,1), dt_transacao date, fk_operacao int not null, constraint fk_operacao foreign key(fk_operacao) references tb_operacao(cd_operacao) );
CREATE table tb_usuario ( cd_usuario int not null primary key identity(1,1), nm_usuario varchar(40), cd_senha varchar(12) not null, nm_email varchar(40) not null, cd_status_usuario bit not null );
CREATE table tb_operacao ( cd_operacao int not null primary key identity(1,1), nm_operacao varchar(40) );
CREATE table tb_ordem_compra ( cd_ordem_compra int not null primary key identity(1,1), fk_produto_compra int not null, qt_produto int not null, tp_status_ordem bit not null, constraint fk_produto_compra foreign key (fk_produto_compra) references tb_produto(cd_produto) );
CREATE table item_produto_transacao ( fk_produto int not null, fk_transacao int not null, qt_produto int not null, vl_preco_vendido float not null, fk_usuario int not null, constraint fk_produto foreign key (fk_produto) references tb_produto(cd_produto), constraint fk_transacao foreign key (fk_transacao) references tb_transacao(cd_transacao), constraint fk_usuario foreign key (fk_usuario) references tb_usuario(cd_usuario) );

CREATE PROCEDURE sp_addUsuario @Nome varchar (40), @Senha varchar (40), @Email varchar (12), @Status bit = 1 as if((select count(nm_email) from tb_usuario where nm_email = @Email)>0) begin print 'Usuario Existente' end else if(@Email = '') begin print 'Email nao pode ser vazio' end else begin insert into tb_usuario values (@Nome,@Senha,@Email,@Status) print 'Usuario Cadastrado' end;
CREATE PROCEDURE sp_DesativaUsuario @email varchar(40) AS UPDATE tb_usuario SET cd_status_usuario = 0 WHERE nm_email = @email
CREATE PROCEDURE sp_AlterSenha @Email varchar(40), @SenhaAntiga varchar(40), @SenhaNova varchar(40) as update tb_usuario set cd_senha = @SenhaNova where cd_senha = @SenhaAntiga and nm_email = @Email; 

CREATE PROCEDURE sp_AddCategoria @NomeCategoria varchar(40)='' as if((select count(nm_categoria) from tb_categoria where nm_categoria = @NomeCategoria)>0) begin print 'Categoria Existente' end else begin insert into tb_categoria values(@NomeCategoria); print 'Categoria Adcionada' end;
CREATE PROCEDURE sp_AlterCategoria @NomeAntigo varchar(40), @NomeNovo varchar(40) as update tb_categoria set nm_categoria = @NomeNovo where nm_categoria = @NomeAntigo;
CREATE PROCEDURE sp_DeleteCategoria @Nome varchar(40) as delete from tb_categoria where nm_categoria = @Nome;

CREATE PROCEDURE sp_AddProduto @NomeProduto varchar(40)='', @ValorAtual float= 0, @QtdMinima int = 0, @QtdAtual int = 0, @Categoria int = 0 , @Status bit = 1 as if((select count(cd_produto) from tb_produto where nm_produto = @NomeProduto)=0) begin  if(@QtdAtual >= @QtdMinima) begin  insert into tb_produto values (      @NomeProduto,    @ValorAtual,    @QtdMinima,    @QtdAtual,    @Status,   @Categoria )   print 'Produto Adcionado'     end     else begin print 'O valor Atual não pode ser menor que o Minimo' end  end  else begin print 'Produto ja adcionado'  end;
CREATE PROCEDURE sp_AlterProduto @codigoProduto int, @NomeProduto varchar(40)='', @ValorAtual float=' ', @QtdMinima int =' ', @QtdAtual int =' ', @Categoria int =' ' as update tb_produto set nm_produto = @NomeProduto, vl_produto_atual = @ValorAtual, qt_produto_min = @QtdMinima, qt_produto_atual = @QtdAtual, fk_categoria=@Categoria where cd_produto = @codigoProduto;
CREATE PROCEDURE sp_DesativarProduto @codigoProduto varchar(40) AS UPDATE tb_produto SET tp_status_produto = 0 WHERE cd_produto = @codigoProduto
CREATE PROCEDURE sp_ListagemProduto as select p.nm_produto as 'Produto', p.cd_produto as 'Codigo', p.vl_produto_atual as 'Valor_Produto', p.qt_produto_min as 'Quantidade_Min', p.qt_produto_atual as 'Quantidade_Atual', c.nm_categoria 'Categoria', p.tp_status_produto as 'status' from tb_produto P INNER JOIN tb_categoria C on P.fk_categoria = C.cd_categoria

CREATE PROCEDURE sp_AddOperacao @NomeOperacao varchar(40) as if((select count(cd_operacao) from tb_operacao where nm_operacao=@NomeOperacao)=0) begin insert into tb_operacao values(@NomeOperacao) end else begin print 'Operacao ja existente' end;
CREATE PROCEDURE sp_AlterOperacao @CodigoOperacao int, @NomeOperacao varchar(40) as update tb_operacao set nm_operacao = @NomeOperacao where cd_operacao = @CodigoOperacao;
CREATE PROCEDURE sp_DeleteOperacao @Codigo int as delete tb_operacao where cd_operacao = @Codigo;


CREATE PROCEDURE sp_AttEstoque @QtdProduto int, @idProduto int, @TipoTransacao varchar(20), @idUsuario int as if(@TipoTransacao = 'compra')  begin insert into tb_transacao values ((select getdate()), (select cd_operacao from tb_operacao where nm_operacao = @TipoTransacao)); update tb_produto set qt_produto_atual = qt_produto_atual + @QtdProduto where cd_produto = @idProduto; insert into item_produto_transacao values (@idProduto, (select max(cd_transacao) from tb_transacao), @QtdProduto, (select vl_produto_atual from tb_produto where cd_produto = @idProduto), @idUsuario); end else begin if((select qt_produto_atual from tb_produto where cd_produto = @idProduto) - @QtdProduto > 0) begin insert into tb_transacao values ((select getdate()), (select cd_operacao from tb_operacao where nm_operacao = @TipoTransacao)); update tb_produto set qt_produto_atual = qt_produto_atual - @QtdProduto where cd_produto = @idProduto; insert into item_produto_transacao values (@idProduto, (select max(cd_transacao) from tb_transacao), @QtdProduto, (select vl_produto_atual from tb_produto where cd_produto = @idProduto), @idUsuario) end  else begin print 'Quantidade indisponível no estoque' end end
create TRIGGER estoqueMinimo on tb_produto FOR UPDATE as if (select qt_produto_atual from inserted) < (select qt_produto_min from inserted) begin insert into tb_ordem_compra values ((select cd_produto from inserted),(select qt_produto_min from inserted)-(select qt_produto_atual from inserted),1) end